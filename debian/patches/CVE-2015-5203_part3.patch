From: Markus Koschany <apo@debian.org>
Date: Tue, 20 Nov 2018 17:06:14 +0100
Subject: CVE-2015-5203_part3

For a detailed analysis see
https://bugzilla.redhat.com/show_bug.cgi?id=1254242#c11

Origin: https://github.com/mdadams/jasper/commit/d42b2388f7f8e0332c846675133acea151fc557a#diff-6cf8c17c2a7595ef1481b68354696c37R357
---
 src/libjasper/base/jas_image.c          | 12 +++++++
 src/libjasper/include/jasper/jas_math.h | 55 +++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+)

diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index d9f87b0..afc0b9a 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -76,6 +76,8 @@
 #include <string.h>
 #include <assert.h>
 #include <ctype.h>
+#include <inttypes.h>
+#include <limits.h>
 
 #include "jasper/jas_math.h"
 #include "jasper/jas_image.h"
@@ -87,6 +89,8 @@
 \******************************************************************************/
 
 #define	FLOORDIV(x, y) ((x) / (y))
+#define TRUE 1
+#define FALSE 0
 
 /******************************************************************************\
 * Local prototypes.
@@ -307,6 +311,14 @@ static jas_image_cmpt_t *jas_image_cmpt_create(uint_fast32_t tlx,
 		goto error;
 	}
 
+	if (width < 0 || height < 0 || hstep <= 0 || vstep <= 0) {
+		goto error;
+    }
+
+	if (!jas_safe_intfast32_mul3(width, height, depth, 0)) {
+		goto error;
+	}
+
 	cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;
 	cmpt->tlx_ = tlx;
 	cmpt->tly_ = tly;
diff --git a/src/libjasper/include/jasper/jas_math.h b/src/libjasper/include/jasper/jas_math.h
index eccf2bc..db44f0c 100644
--- a/src/libjasper/include/jasper/jas_math.h
+++ b/src/libjasper/include/jasper/jas_math.h
@@ -75,6 +75,7 @@
 \******************************************************************************/
 
 #include <jasper/jas_config.h>
+#include <jasper/jas_types.h>
 
 #include	<assert.h>
 #include	<stdio.h>
@@ -111,6 +112,9 @@ extern "C" {
 #define	JAS_ONES(n) \
   ((1 << (n)) - 1)
 
+#define true 1
+#define false 0
+
 inline static int jas_safe_size_mul(size_t x, size_t y, size_t *result)
 {
         /* Check if overflow would occur */
@@ -138,6 +142,57 @@ inline static bool jas_safe_size_mul3(size_t a, size_t b, size_t c,
 	return true;
 }
 
+/* Compute the sum of two size_t integer with overflow checking. */
+inline static bool jas_safe_intfast32_mul(int_fast32_t x, int_fast32_t y,
+  int_fast32_t *result)
+{
+	if (x > 0) {
+		/* x is positive */
+		if (y > 0) {
+			/* x and y are positive */
+			if (x > INT_FAST32_MAX / y) {
+				return false;
+			}
+		} else {
+			/* x positive, y nonpositive */
+			if (y < INT_FAST32_MIN / x) {
+				return false;
+			}
+		}
+	} else {
+		/* x is nonpositive */
+		if (y > 0) {
+			/* x is nonpositive, y is positive */
+			if (x < INT_FAST32_MIN / y) {
+				return false;
+			}
+		} else { /* x and y are nonpositive */
+			if (x != 0 && y < INT_FAST32_MAX / x) {
+				return false;
+			}
+		}
+	}
+
+	if (result) {
+		*result = x * y;
+	}
+	return true;
+}
+
+inline static bool jas_safe_intfast32_mul3(int_fast32_t a, int_fast32_t b,
+  int_fast32_t c, int_fast32_t *result)
+{
+	int_fast32_t tmp;
+	if (!jas_safe_intfast32_mul(a, b, &tmp) ||
+	  !jas_safe_intfast32_mul(tmp, c, &tmp)) {
+		return false;
+	}
+	if (result) {
+		*result = tmp;
+	}
+	return true;
+}
+
 #ifdef __cplusplus
 }
 #endif
